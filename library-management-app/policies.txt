CREATE TABLE profiles (
  id UUID REFERENCES auth.users(id),
  email TEXT,
  role TEXT CHECK (role IN ('student', 'librarian')),
  PRIMARY KEY (id)
);

CREATE TABLE book_requests (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  book_title TEXT,
  status TEXT CHECK (status IN ('pending', 'approved', 'rejected')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Allow users to view their own profile
CREATE POLICY "Users can view own profile" ON profiles
  FOR SELECT USING (auth.uid() = id);

-- Allow users to insert their own profile
CREATE POLICY "Users can insert own profile" ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

-- Allow students to view and insert their own requests
CREATE POLICY "Students can view own requests" ON book_requests
  FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Students can insert own requests" ON book_requests
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Allow librarians to view all requests
CREATE POLICY "Librarians can view all requests" ON book_requests
  FOR SELECT USING (
    (SELECT role FROM profiles WHERE id = auth.uid()) = 'librarian'
  );

-- Allow librarians to update request status
CREATE POLICY "Librarians can update requests" ON book_requests
  FOR UPDATE USING (
    (SELECT role FROM profiles WHERE id = auth.uid()) = 'librarian'
  );